<?xml version="1.0" encoding="utf-8"?>

<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <VersionCache>$(IntermediateOutputPath)VersionInformation.cache</VersionCache>
    </PropertyGroup>

    <Target Name="CleanVersions" AfterTargets="Clean">
        <Delete Files="$(VersionCache)" />
    </Target>

    <Target Name="Deploy" />

    <Target Name="DeployTargetFile" DependsOnTargets="ResolveArtifactFileName">
        <Error Condition=" '$(ArtifactSubDir)' != '' AND !HasTrailingSlash('$(ArtifactSubDir)')"
               Text="The ArtifactSubDir if set must end with a trailing slash." />
        <Error Condition=" '$(ArtifactDirectory)' == '' "
               Text="The ArtifactDirectory must be set." />
        <Error Condition="!HasTrailingSlash('$(ArtifactDirectory)')"
               Text="The ArtifactDirectory must end with a trailing slash." />
        <PropertyGroup>
            <ArtifactFullDirectory>$(ArtifactDirectory)$(ArtifactSubDir)</ArtifactFullDirectory>
            <Artifact>$(ArtifactFullDirectory)$(ArtifactFileName)</Artifact>
        </PropertyGroup>
        <Error Condition="$(PreserveExistingArtifacts) == 'True' AND Exists('$(Artifact)') "
               Text="$(Artifact): File already exists!" />
        <Message Text="DeployTargetFile: Copying $(TargetPath) to $(Artifact)"/>
        <MakeDir Directories="$(ArtifactFullDirectory)" Condition="'$(ArtifactSubDir)' != '' AND !Exists('$(ArtifactFullDirectory)')"/>               
        <Copy SourceFiles="$(TargetPath)" DestinationFiles="$(Artifact)" />
    </Target>

    <Target Name="ImportNuGetReferences" DependsOnTargets="TransformNuGetReferences">
        <MSBuild Projects="$(IntermediateOutputPath)NuGetReferences.xml" Targets="Import">
            <Output TaskParameter="TargetOutputs" ItemName="NuGetReference" />
        </MSBuild>
    </Target>

    <!-- UPDATED: Support both 'vMAJOR.MINOR.PATCH-DIST-gHASH' and legacy 'Release-MAJOR.MINOR.PATCH-DIST-gHASH' -->
    <Target Name="ParseWorkspaceDescription" DependsOnTargets="QueryWorkspaceDescription">
        <PropertyGroup>
            <!-- Raw parts from git describe -->
            <_WsPart0>$(WorkspaceDescription.Split('-')[0])</_WsPart0>
            <_WsPart1>$(WorkspaceDescription.Split('-')[1])</_WsPart1>
            <_WsPart2>$(WorkspaceDescription.Split('-')[2])</_WsPart2>
            <!-- Identify style -->
            <_IsVTag>false</_IsVTag>
            <_IsVTag Condition="$([System.String]::Copy($(_WsPart0)).StartsWith('v'))">true</_IsVTag>
            <_IsLegacy>false</_IsLegacy>
            <_IsLegacy Condition="$([System.String]::Copy($(_WsPart0)).Equals('Release'))">true</_IsLegacy>
            <!-- Base semantic version (no leading v) -->
            <_BaseVersion Condition="$(_IsVTag) == 'true'">$([System.String]::Copy($(_WsPart0)).Substring(1))</_BaseVersion>
            <_BaseVersion Condition="$(_IsLegacy) == 'true'">$(_WsPart1)</_BaseVersion>
            <!-- Distance from tag -->
            <_Distance Condition="$(_IsVTag) == 'true'">$(_WsPart1)</_Distance>
            <_Distance Condition="$(_IsLegacy) == 'true'">$(_WsPart2)</_Distance>
            <_Distance Condition=" '$(_Distance)' == '' ">0</_Distance>
            <!-- Version components -->
            <_Major>$([System.String]::Copy($(_BaseVersion)).Split('.')[0])</_Major>
            <_Minor>$([System.String]::Copy($(_BaseVersion)).Split('.')[1])</_Minor>
            <_Patch>$([System.String]::Copy($(_BaseVersion)).Split('.')[2])</_Patch>
            <!-- Effective patch (increment if distance > 0 to mark RC base) -->
            <_NextPatch Condition=" '$(_Distance)' != '0' ">$([MSBuild]::Add($(_Patch), 1))</_NextPatch>
            <_EffectivePatch Condition=" '$(_Distance)' == '0' ">$(_Patch)</_EffectivePatch>
            <_EffectivePatch Condition=" '$(_Distance)' != '0' ">$(_NextPatch)</_EffectivePatch>
            <!-- Public three-part version used for package/version labeling -->
            <VersionThree>$(_Major).$(_Minor).$(_EffectivePatch)</VersionThree>
            <!-- Keep original distance naming compatibility -->
            <VersionFourthNumber>$(_Distance)</VersionFourthNumber>
            <!-- Padding for RC suffix -->
            <PaddedVersionFourthNumber>$(_Distance)</PaddedVersionFourthNumber>
            <PaddedVersionFourthNumber Condition="$(_Distance) &lt; 100">0$(_Distance)</PaddedVersionFourthNumber>
            <PaddedVersionFourthNumber Condition="$(_Distance) &lt; 10">00$(_Distance)</PaddedVersionFourthNumber>
            <!-- File / assembly style version (original base + distance) -->
            <Version>$(_BaseVersion).$(_Distance)</Version>
            <!-- PackageVersion (semantic) with rc suffix when distance > 0 -->
            <PackageVersion>$(VersionThree)</PackageVersion>
            <PackageVersion Condition=" '$(_Distance)' != '0' ">$(VersionThree)-rc$(PaddedVersionFourthNumber)</PackageVersion>
            <!-- Artifact naming suffix (optionally drop minor distance) -->
            <VersionFileSuffix Condition=" '$(ExcludeMinorVersionNumber)' != 'true' ">$(Version)</VersionFileSuffix>
            <VersionFileSuffix Condition=" '$(ExcludeMinorVersionNumber)' == 'true' ">$(_Major).$(_Minor)</VersionFileSuffix>
            <ArtifactSubDir Condition=" '$(ArtifactSubDir)' != '' ">$(ArtifactSubDir)-$(Version)\</ArtifactSubDir>
        </PropertyGroup>
        <Message Importance="high" Text="ParseWorkspaceDescription WorkspaceDescription=$(WorkspaceDescription)" />
        <Message Importance="high" Text="ParseWorkspaceDescription Style: VTag=$(_IsVTag) Legacy=$(_IsLegacy) Base=$(_BaseVersion) Distance=$(_Distance)" />
        <Message Importance="high" Text="ParseWorkspaceDescription PackageVersion(ProductVersion)=$(PackageVersion) FileVersion=$(Version)" />
        <Message Importance="high" Text="ParseWorkspaceDescription ArtifactSubDir=$(ArtifactSubDir)" />
    </Target>

    <Target Name="QueryVersion" DependsOnTargets="ParseWorkspaceDescription;PrepareForBuild" Returns="$(Version)">
        <MSBuild Condition=" Exists('$(VersionCache)') " Projects="$(VersionCache)" Targets="GetCachedVersion">
            <Output TaskParameter="TargetOutputs" PropertyName="CachedVersion" />
        </MSBuild>
        <ItemGroup>
            <CacheItems Include="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" />
            <CacheItems Include="&lt;Project xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;" />
            <CacheItems Include="&lt;Target Name=&quot;GetCachedVersion&quot; Returns=&quot;$(Version)&quot; /&gt;" />
            <CacheItems Include="&lt;/Project&gt;" />
        </ItemGroup>
        <WriteLinesToFile File="$(VersionCache)" Lines="@(CacheItems)" Overwrite="true" Encoding="utf-8" />
        <Message Text="QueryVersion Version: $(Version) PackageVersion: $(PackageVersion)" />
    </Target>

    <Target Name="QueryAncestorDescription" DependsOnTargets="ResolveAncestor">
        <Exec Command="$(LatestTagScript) --rev ancestor(@(Ancestors,','))" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="AncestorDescription" />
        </Exec>
        <Message Text="QueryAncestorDescription AncestorDescription: $(AncestorDescription)" />
    </Target>

    <Target Name="QueryWorkspaceDescription">
        <Exec Command="$(DescriptionScript)" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="WorkspaceDescription" />
        </Exec>
    </Target>

    <Target Name="ResolveAncestor">
        <Exec Command="§(AncestorScript)">
            <Output TaskParameter="ConsoleOutput" ItemName="AncestorsID" />
        </Exec>
        <PropertyGroup>
            <Ancestors>$(AncestorsID.Split('-')[1])</Ancestors>
        </PropertyGroup>
        <Message Text="Ancestors: $(Ancestors)" />
    </Target>

    <Target Name="ResolveArtifactFileName" DependsOnTargets="QueryVersion">
        <PropertyGroup>
            <ArtifactFileName Condition=" '$(NoVersionNumberInArtifact)' != 'true' ">$(TargetName)-$(VersionFileSuffix)$(TargetExt)</ArtifactFileName>
            <ArtifactFileName Condition=" '$(NoVersionNumberInArtifact)' == 'true' ">$(TargetName)$(TargetExt)</ArtifactFileName>
        </PropertyGroup>
    </Target>

    <Target Name="RunUnitTests" DependsOnTargets="Build" />

    <Import Project="$(SolutionDir)$(SolutionName).Common.targets"
            Condition="Exists('$(SolutionDir)$(SolutionName).Common.targets')" />
    <Import Condition="Exists('$(LocalTargets)')" Project="$(LocalTargets)" />

</Project>